html {
  font-size: 62.5%;
  /*62.5% of 16px is 10px, so we have our desired root font-size.*/
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /*Forced inheritance. 
    All child are now gonna have inherited value of border-box in the property box-sizing (declared in body selector)*/
  /*It's not good to have font-size in px coz users with low eye sight change the browser's font-size(16px) to see properly,
    but due that, our declared value will have no effect and hence the rest of the code can create problems and bad UX.*/ }

body {
  box-sizing: border-box;
  /*padding and border is included in div's height and width*/ }

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInTop {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  /*line height is 1.7x that of orignal element*/
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    /*animation: animation-name animation-duration animation-timing-function*/
    animation: moveInLeft 1s ease-out; }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.74rem;
    /*animation: animation-name animation-duration animation-timing-function*/
    animation: moveInRight 1s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: 2px;
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(10deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.3); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.btn:link, .btn:visited {
  /*A psuedo-class is a special state of a selector. Here link is psuedo-class of the btn selector*/
  /*Other psuedo-classes would be - hover, active, checkbox is clicked etc...*/
  /*:link is for the element(containing href) which is not yet visited.*/
  /*:visited is for the element(containing href) which is already visited atleast once.*/
  position: relative;
  border-radius: 200px;
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  transition: all 0.1s;
  /*For basic animations. It selects all the animation, movement etc. and give it a time-duration of .2s*/
  /*transition property is always declared in the initial state of an element.  */
  font-size: 1.6rem; }

.btn:hover {
  /*When mouse hovers over &*/
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  /*X Y blur color*/ }
  .btn:hover::after {
    /*an ::after pseudo element only when th .btn is in hover state*/
    transform: scaleX(2) scaleY(1.8);
    opacity: 0; }

.btn:active {
  /*When & is clicked*/
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
  /*X Y blur color*/ }

.btn--white {
  background-color: #fff;
  color: #777; }

.btn--animated {
  animation: moveInTop .5s ease-out .75s;
  animation-fill-mode: backwards;
  /*This sets the initial (0%) values of animation in the element(&)*/ }

.btn::after {
  /*This is like a child of the &. We have to make it exactly like the &. And then, we put it behind &. */
  content: "";
  /*If we want to have this pseudo element on our webpage, we have to specify content!!! 
        Even if it is empty.
        This is always done!!*/
  display: inline-block;
  /*Just like content, dislplay property is also necessary.*/
  height: 100%;
  width: 100%;
  border-radius: 20rem;
  position: absolute;
  /*For the animation to come from the back of the button*/
  top: 0;
  left: 0;
  z-index: -1;
  /*Placing &::after in back*/
  transition: all .4s;
  /* background-color: white; */
  background-color: white; }

.btn-text:link, .btn-text:visited {
  color: #7ed56f;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #7ed56f;
  padding: 3px;
  font-size: 1.6rem;
  transition: all .2s; }

.btn-text:hover {
  background-color: #7ed56f;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
  transform: translateY(0); }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }

.header {
  position: relative;
  height: 95vh;
  /*95% of viewport height*/
  /*viewport: user's visible area of a webpage*/
  background-image: linear-gradient(to right, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /*Linear gradient adds a color gradient in the div*/
  background-size: cover;
  /*Always fits the bg img in the viewport*/
  background-position: top;
  /*Top of the img always stays with top of the container*/
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /*clip-path clips the div in a particular polygon. 
    We have to mention coordinates of 4 sides- top, right, bottom, left (clockwise).
    We can have as many coordinate points as we want and as reqd.*/ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
    /*4rem from parent element's border whose position is set to relative*/ }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /*This will set the starting coordinate of element at (40%, 50%) of the screen. With reference from the parent element*/
    transform: translate(-50%, -50%);
    /*By doing this, we shift the element by (-1/2, -1/2) times from the same coordinate. With reference from the same element*/
    text-align: center; }

.row {
  max-width: 114rem;
  background-color: #eee;
  margin: 0 auto;
  margin-bottom: 8rem; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem)/2); }
  .row .col-1-of-3 {
    width: calc((100% - 2*6rem)/3); }
  .row .col-1-of-4 {
    width: calc((100% - 3*6rem)/4); }
  .row .col-2-of-3 {
    width: calc(2*((100% - 2*6rem)/3) + 6rem); }
  .row .col-2-of-4 {
    width: calc(2*((100% - 3*6rem)/4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3*((100% - 3*6rem)/4) + 2*6rem); }
